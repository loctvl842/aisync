diff --git a/Makefile b/Makefile
index c4da7e2..4aa587c 100644
--- a/Makefile
+++ b/Makefile
@@ -35,3 +35,13 @@ options:
 	@echo -ne "\033[34m---------------------------------------------------------------\033[0m"
 	@echo ""
 	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-22s\033[0m %s\n", $$1, $$2}' | sort
+
+
+### API
+
+.PHONY: api
+api:  ## Run a command in packages/api/Makefile (Usage: make api <command>)
+	@$(MAKE) --no-print-directory -C packages/api $(filter-out $@, $(MAKECMDGOALS))
+
+%:
+	@:
diff --git a/packages/api/src/aisync_api/auth/permissions.py b/packages/api/src/aisync_api/auth/permissions.py
index ab75ca8..75c0629 100644
--- a/packages/api/src/aisync_api/auth/permissions.py
+++ b/packages/api/src/aisync_api/auth/permissions.py
@@ -1,10 +1,10 @@
 from typing import Any
 
+
 class Permission:
     def __call__(self, request: Any):
         pass
 
 
-
 def has_permissions(*resources: Any):
     pass
diff --git a/packages/api/src/aisync_api/database/migrations/versions/202502231556-f1a4dd538cc2-auth_group.py b/packages/api/src/aisync_api/database/migrations/versions/202502231556-f1a4dd538cc2-auth_group.py
index 3bf3b69..419f753 100644
--- a/packages/api/src/aisync_api/database/migrations/versions/202502231556-f1a4dd538cc2-auth_group.py
+++ b/packages/api/src/aisync_api/database/migrations/versions/202502231556-f1a4dd538cc2-auth_group.py
@@ -1,10 +1,11 @@
 """auth group
 
 Revision ID: f1a4dd538cc2
-Revises: 
+Revises:
 Create Date: 2025-02-23 15:56:27.591869
 
 """
+
 from typing import Sequence, Union
 
 from alembic import op
@@ -12,7 +13,7 @@ import sqlalchemy as sa
 
 
 # revision identifiers, used by Alembic.
-revision: str = 'f1a4dd538cc2'
+revision: str = "f1a4dd538cc2"
 down_revision: Union[str, None] = None
 branch_labels: Union[str, Sequence[str], None] = None
 depends_on: Union[str, Sequence[str], None] = None
@@ -20,61 +21,66 @@ depends_on: Union[str, Sequence[str], None] = None
 
 def upgrade() -> None:
     # ### commands auto generated by Alembic - please adjust! ###
-    op.create_table('auth_permission',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('name', sa.String(), nullable=True),
-    sa.Column('action', sa.String(), nullable=False),
-    sa.Column('resource', sa.String(), nullable=False),
-    sa.Column('description', sa.String(), nullable=True),
-    sa.PrimaryKeyConstraint('id')
+    op.create_table(
+        "auth_permission",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("name", sa.String(), nullable=True),
+        sa.Column("action", sa.String(), nullable=False),
+        sa.Column("resource", sa.String(), nullable=False),
+        sa.Column("description", sa.String(), nullable=True),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.create_index(op.f('ix_auth_permission_action'), 'auth_permission', ['action'], unique=False)
-    op.create_index(op.f('ix_auth_permission_name'), 'auth_permission', ['name'], unique=True)
-    op.create_index(op.f('ix_auth_permission_resource'), 'auth_permission', ['resource'], unique=False)
-    op.create_table('auth_role',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('name', sa.String(), nullable=True),
-    sa.Column('description', sa.String(), nullable=True),
-    sa.PrimaryKeyConstraint('id')
+    op.create_index(op.f("ix_auth_permission_action"), "auth_permission", ["action"], unique=False)
+    op.create_index(op.f("ix_auth_permission_name"), "auth_permission", ["name"], unique=True)
+    op.create_index(op.f("ix_auth_permission_resource"), "auth_permission", ["resource"], unique=False)
+    op.create_table(
+        "auth_role",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("name", sa.String(), nullable=True),
+        sa.Column("description", sa.String(), nullable=True),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.create_index(op.f('ix_auth_role_name'), 'auth_role', ['name'], unique=True)
-    op.create_table('auth_user',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('name', sa.String(), nullable=True),
-    sa.Column('email', sa.String(), nullable=True),
-    sa.Column('hashed_password', sa.String(), nullable=True),
-    sa.PrimaryKeyConstraint('id')
+    op.create_index(op.f("ix_auth_role_name"), "auth_role", ["name"], unique=True)
+    op.create_table(
+        "auth_user",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("name", sa.String(), nullable=True),
+        sa.Column("email", sa.String(), nullable=True),
+        sa.Column("hashed_password", sa.String(), nullable=True),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.create_index(op.f('ix_auth_user_email'), 'auth_user', ['email'], unique=True)
-    op.create_table('auth_role_permission',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('role_id', sa.UUID(), nullable=True),
-    sa.Column('permission_id', sa.UUID(), nullable=True),
-    sa.ForeignKeyConstraint(['permission_id'], ['auth_permission.id'], name='fk_role_permission_permission'),
-    sa.ForeignKeyConstraint(['role_id'], ['auth_role.id'], name='fk_role_permission_role'),
-    sa.PrimaryKeyConstraint('id')
+    op.create_index(op.f("ix_auth_user_email"), "auth_user", ["email"], unique=True)
+    op.create_table(
+        "auth_role_permission",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("role_id", sa.UUID(), nullable=True),
+        sa.Column("permission_id", sa.UUID(), nullable=True),
+        sa.ForeignKeyConstraint(["permission_id"], ["auth_permission.id"], name="fk_role_permission_permission"),
+        sa.ForeignKeyConstraint(["role_id"], ["auth_role.id"], name="fk_role_permission_role"),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.create_table('auth_user_role',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('user_id', sa.UUID(), nullable=True),
-    sa.Column('role_id', sa.UUID(), nullable=True),
-    sa.ForeignKeyConstraint(['role_id'], ['auth_role.id'], name='fk_user_role_role'),
-    sa.ForeignKeyConstraint(['user_id'], ['auth_user.id'], name='fk_user_role_user'),
-    sa.PrimaryKeyConstraint('id')
+    op.create_table(
+        "auth_user_role",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("user_id", sa.UUID(), nullable=True),
+        sa.Column("role_id", sa.UUID(), nullable=True),
+        sa.ForeignKeyConstraint(["role_id"], ["auth_role.id"], name="fk_user_role_role"),
+        sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], name="fk_user_role_user"),
+        sa.PrimaryKeyConstraint("id"),
     )
     # ### end Alembic commands ###
 
 
 def downgrade() -> None:
     # ### commands auto generated by Alembic - please adjust! ###
-    op.drop_table('auth_user_role')
-    op.drop_table('auth_role_permission')
-    op.drop_index(op.f('ix_auth_user_email'), table_name='auth_user')
-    op.drop_table('auth_user')
-    op.drop_index(op.f('ix_auth_role_name'), table_name='auth_role')
-    op.drop_table('auth_role')
-    op.drop_index(op.f('ix_auth_permission_resource'), table_name='auth_permission')
-    op.drop_index(op.f('ix_auth_permission_name'), table_name='auth_permission')
-    op.drop_index(op.f('ix_auth_permission_action'), table_name='auth_permission')
-    op.drop_table('auth_permission')
+    op.drop_table("auth_user_role")
+    op.drop_table("auth_role_permission")
+    op.drop_index(op.f("ix_auth_user_email"), table_name="auth_user")
+    op.drop_table("auth_user")
+    op.drop_index(op.f("ix_auth_role_name"), table_name="auth_role")
+    op.drop_table("auth_role")
+    op.drop_index(op.f("ix_auth_permission_resource"), table_name="auth_permission")
+    op.drop_index(op.f("ix_auth_permission_name"), table_name="auth_permission")
+    op.drop_index(op.f("ix_auth_permission_action"), table_name="auth_permission")
+    op.drop_table("auth_permission")
     # ### end Alembic commands ###
diff --git a/packages/api/src/aisync_api/database/migrations/versions/202502231601-ace9ed77328c-proj_group.py b/packages/api/src/aisync_api/database/migrations/versions/202502231601-ace9ed77328c-proj_group.py
index ef5e6c1..482756b 100644
--- a/packages/api/src/aisync_api/database/migrations/versions/202502231601-ace9ed77328c-proj_group.py
+++ b/packages/api/src/aisync_api/database/migrations/versions/202502231601-ace9ed77328c-proj_group.py
@@ -5,6 +5,7 @@ Revises: f1a4dd538cc2
 Create Date: 2025-02-23 16:01:45.223976
 
 """
+
 from typing import Sequence, Union
 
 from alembic import op
@@ -12,38 +13,40 @@ import sqlalchemy as sa
 
 
 # revision identifiers, used by Alembic.
-revision: str = 'ace9ed77328c'
-down_revision: Union[str, None] = 'f1a4dd538cc2'
+revision: str = "ace9ed77328c"
+down_revision: Union[str, None] = "f1a4dd538cc2"
 branch_labels: Union[str, Sequence[str], None] = None
 depends_on: Union[str, Sequence[str], None] = None
 
 
 def upgrade() -> None:
     # ### commands auto generated by Alembic - please adjust! ###
-    op.create_table('proj_team',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('name', sa.String(), nullable=True),
-    sa.Column('description', sa.String(), nullable=True),
-    sa.PrimaryKeyConstraint('id')
+    op.create_table(
+        "proj_team",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("name", sa.String(), nullable=True),
+        sa.Column("description", sa.String(), nullable=True),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.create_table('proj_project',
-    sa.Column('id', sa.UUID(), nullable=False),
-    sa.Column('name', sa.String(), nullable=True),
-    sa.Column('user_id', sa.UUID(), nullable=True),
-    sa.Column('team_id', sa.UUID(), nullable=True),
-    sa.ForeignKeyConstraint(['team_id'], ['proj_team.id'], name='fk_project_team'),
-    sa.ForeignKeyConstraint(['user_id'], ['auth_user.id'], name='fk_project_user'),
-    sa.PrimaryKeyConstraint('id')
+    op.create_table(
+        "proj_project",
+        sa.Column("id", sa.UUID(), nullable=False),
+        sa.Column("name", sa.String(), nullable=True),
+        sa.Column("user_id", sa.UUID(), nullable=True),
+        sa.Column("team_id", sa.UUID(), nullable=True),
+        sa.ForeignKeyConstraint(["team_id"], ["proj_team.id"], name="fk_project_team"),
+        sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], name="fk_project_user"),
+        sa.PrimaryKeyConstraint("id"),
     )
-    op.add_column('auth_user_role', sa.Column('team_id', sa.UUID(), nullable=True))
-    op.create_foreign_key('fk_user_role_team', 'auth_user_role', 'proj_team', ['team_id'], ['id'])
+    op.add_column("auth_user_role", sa.Column("team_id", sa.UUID(), nullable=True))
+    op.create_foreign_key("fk_user_role_team", "auth_user_role", "proj_team", ["team_id"], ["id"])
     # ### end Alembic commands ###
 
 
 def downgrade() -> None:
     # ### commands auto generated by Alembic - please adjust! ###
-    op.drop_constraint('fk_user_role_team', 'auth_user_role', type_='foreignkey')
-    op.drop_column('auth_user_role', 'team_id')
-    op.drop_table('proj_project')
-    op.drop_table('proj_team')
+    op.drop_constraint("fk_user_role_team", "auth_user_role", type_="foreignkey")
+    op.drop_column("auth_user_role", "team_id")
+    op.drop_table("proj_project")
+    op.drop_table("proj_team")
     # ### end Alembic commands ###
diff --git a/packages/api/src/aisync_api/database/models.py b/packages/api/src/aisync_api/database/models.py
index d87a229..f53e824 100644
--- a/packages/api/src/aisync_api/database/models.py
+++ b/packages/api/src/aisync_api/database/models.py
@@ -1,6 +1,6 @@
 from __future__ import annotations
 
-from sqlalchemy import UUID, ForeignKey, String
+from sqlalchemy import UUID, ForeignKey, String, UniqueConstraint
 from sqlalchemy.ext.asyncio import AsyncAttrs
 from sqlalchemy.orm import Mapped, mapped_column, relationship
 from sqlalchemy.orm import DeclarativeBase
@@ -75,6 +75,8 @@ class TblUserRole(Base):
     role: Mapped[TblRole] = relationship("TblRole", back_populates="user_roles")
     team: Mapped[TblTeam] = relationship("TblTeam", back_populates="user_roles")
 
+    __table_args__ = (UniqueConstraint("user_id", "team_id", name="uq_user_team"),)
+
 
 class TblPermission(Base):
     __tablename__ = "auth_permission"
diff --git a/packages/api/src/aisync_api/routes/main/team.py b/packages/api/src/aisync_api/routes/main/team.py
index 794990a..a6ed1ff 100644
--- a/packages/api/src/aisync_api/routes/main/team.py
+++ b/packages/api/src/aisync_api/routes/main/team.py
@@ -74,7 +74,7 @@ async def create_team(
 
 
 @router.get("/{team_id}/members")
-async def get_team(
+async def get_team_members(
     team_id: UUID,
     user: Annotated[TblUser, Depends(authenticate)],
     session: Annotated[AsyncSession, Depends(get_db_session())],
@@ -95,7 +95,4 @@ async def get_team(
         }
         for user, role in result.all()
     ]
-    return users
-    # roles = await user.awaitable_attrs.roles
-    # print('vaicalon', roles)
-    # return user
+    return Ok(data=users)
diff --git a/packages/core/suits/mark_i/nodes.py b/packages/core/suits/mark_i/nodes.py
index a9df9d6..f5753f1 100644
--- a/packages/core/suits/mark_i/nodes.py
+++ b/packages/core/suits/mark_i/nodes.py
@@ -82,10 +82,7 @@ def king(state: ChatbotOutput, llm: ChatOpenAI) -> State:
     )
     king_decision = llm.invoke(
         [
-            (
-                "system",
-                system_message,
-            ),
+            ("system", system_message),
             state["messages"][-1],
             ("ai", ai_conversations),
         ]
